; השתמשו ב-sort כדי למיין את המערך [{name: 'יוחנן', age: 25}, {name: 'יעל', age: 30}, {name: 'בועז', age: 20}] לפי שם בסדר אלפביתי.
; q60 ⬇️
; השתמשו ב-flat על המערך [1, [2, 3], [4, [5, 6]]] עם עומק של 2.
; השתמשו ב-forEach כדי להדפיס כל תו במחרוזת 'שלום' למסוף.
; השתמשו ב-map כדי ליצור מערך של האותיות הראשונות של כל מילה ב-['תפוח', 'בננה', 'דובדבן'].
; השתמשו ב-filter כדי ליצור מערך של מחרוזות עם יותר מ-3 תווים מ-['א', 'אב', 'אבג', 'אבגד'].
; השתמשו ב-reduce כדי לספור את סך כל התווים ב-['תפוח', 'בננה', 'דובדבן'].
; השתמשו ב-some כדי לבדוק אם יש מחרוזת כלשהי ב-['שלום', 'עולם', 'ג'אווהסקריפט'] שיש בה יותר מ-10 תווים.
; השתמשו ב-every כדי לבדוק אם כל המספרים ב-[10, 20, 30, 40, 50] גדולים מ-5.
; השתמשו ב-find כדי למצוא את המחרוזת הראשונה שמכילה 'וו' ב-['ספר', 'דלת', 'חלון'].
; השתמשו ב-findIndex כדי למצוא את האינדקס של המספר הראשון שגדול מ-10 ב-[5, 10, 15, 20].
; השתמשו ב-sort כדי למיין את המערך ['אאא', 'בב', 'ג'] לפי מספר התווים (בסדר עולה).
; השתמשו ב-flat על המערך [1, [2, [3, [4]]]] עם עומק של 3.
; השתמשו ב-forEach כדי ליצור מערך של שורשי הריבוע של המספרים ב-[1, 4, 9, 16].
; השתמשו ב-map כדי ליצור מערך שבו כל מחרוזת ב-['א', 'ב', 'ג'] מופיעה פעמיים.
; השתמשו ב-filter כדי ליצור מערך של מספרים בין 10 ל-20 מ-[5, 10, 15, 20, 25].
; השתמשו ב-reduce כדי ליצור אובייקט אחד מ-[{א: 1}, {ב: 2}, {ג: 3}].
; השתמשו ב-some כדי לבדוק אם יש אובייקט כלשהו ב-[{x: 1}, {y: 2}, {z: 3}] שיש לו מאפיין 'y'.
; השתמשו ב-every כדי לבדוק אם כל המחרוזות ב-['א1', 'ב2', 'ג3'] מכילות גם אות וגם מספר.
; השתמשו ב-find כדי למצוא את האובייקט הראשון עם 'מחיר' פחות מ-50 ב-[{מחיר: 60}, {מחיר: 40}, {מחיר: 70}].
; השתמשו ב-findIndex כדי למצוא את האינדקס של הערך הלא אמיתי הראשון ב-[1, '', true, 0, null, 'שלום'].
; השתמשו ב-sort כדי למיין את המערך [3.14, 2.71, 1.41, 1.73] בסדר עולה.
; השתמשו ב-flat על המערך ['א', ['ב', ['ג']]] עם אינסוף כעומק.
; השתמשו בשילוב של filter ו-map כדי ליצור מערך של הריבועים של המספרים הזוגיים מ-[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
; השתמשו ב-reduce כדי לקבץ מערך של אובייקטים לפי מאפיין מסוים. לדוגמה: קבצו את [{שם: 'אליס', גיל: 25}, {שם: 'בוב', גיל: 30}, {שם: 'צ'רלי', גיל: 25}] לפי גיל.
; יישמו פונקציית דחיית ביצוע (debounce) פשוטה באמצעות setTimeout והשתמשו בה עם forEach על מערך של פונקציות.
; השתמשו ב-map ו-Promise.all כדי לאחזר נתונים ממספר כתובות URL (תוכלו להשתמש בכתובות דמה).
; יישמו פונקציית זכרון (memoization) פשוטה והשתמשו בה עם map על מערך של מספרים כדי לחשב מספרי פיבונאצ'י.
; השתמשו ב-reduce כדי ליישם גרסה פשוטה של Promise.all.
; יישמו פונקציה שמשתמשת ב-sort ו-reduce כדי למצוא את החציון של מערך מספרים.
; השתמשו בשילוב של map ו-reduce כדי לשטח מערך של מערכים תוך כדי החלת טרנספורמציה על כל איבר.
; יישמו פונקציה שמשתמשת ב-reduce כדי להרכיב פונקציות. לאחר מכן השתמשו בה עם map על מערך של מספרים.
; השתמשו ב-filter ו-reduce כדי ליישם גרסה פשוטה של Array.prototype.groupBy (זמין בחלק מהדפדפנים המודרניים).
; יישמו פונקציה שמשתמשת ב-sort ו-reduce כדי למצוא את השכיח (האיבר הנפוץ ביותר) במערך.
; השתמשו ב-reduce כדי ליישם גרסה פשוטה של flatMap.
; יישמו פונקציה שמשתמשת בשילוב של map, filter, ו-reduce כדי לבצע טרנספורמציה מורכבת על מערך של אובייקטים.
; השתמשו ב-reduce כדי ליישם גרסה פשוטה של Array.prototype.reduceRight.
; יישמו פונקציה שמשתמשת ב-sort עם פונקציית השוואה מותאמת אישית כדי למיין מערך של אובייקטים על פי מספר קריטריונים.
; השתמשו בשילוב של filter, map, ו-reduce כדי ליישם שפת שאילתות פשוטה עבור מערך של אובייקטים.
; יישמו פונקציה שמשתמשת ב-reduce כדי ליצור מבנה נתונים מסוג עץ תחיליות (trie) ממערך של מילים.
; השתמשו בשילוב של map ו-reduce כדי ליישם גרסה פשוטה של Array.prototype.flat עם עומק הניתן להתאמה.
; יישמו פונקציה שמשתמשת ב-reduce כדי ליצור עץ חיפוש בינארי מאוזן ממערך ממוין.
; השתמשו בשילוב של כל שיטות המערך שלמדתם כדי ליישם פונקציית sumif פשוטה דמוית גיליון אלקטרוני על מערך של אובייקטים.